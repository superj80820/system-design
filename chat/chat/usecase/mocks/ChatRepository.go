// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/superj80820/system-design/chat/domain"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// CreateAccountChannels provides a mock function with given fields: ctx, userID, channelID
func (_m *ChatRepository) CreateAccountChannels(ctx context.Context, userID int, channelID int) error {
	ret := _m.Called(ctx, userID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccountFriends provides a mock function with given fields: ctx, userID, friendID
func (_m *ChatRepository) CreateAccountFriends(ctx context.Context, userID int, friendID int) error {
	ret := _m.Called(ctx, userID, friendID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, friendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChannel provides a mock function with given fields: ctx, userID, channelName
func (_m *ChatRepository) CreateChannel(ctx context.Context, userID int, channelName string) (int64, error) {
	ret := _m.Called(ctx, userID, channelName)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (int64, error)); ok {
		return rf(ctx, userID, channelName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int64); ok {
		r0 = rf(ctx, userID, channelName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, channelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountChannels provides a mock function with given fields: ctx, userID
func (_m *ChatRepository) GetAccountChannels(ctx context.Context, userID int) ([]int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountChannels")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int64); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountFriends provides a mock function with given fields: ctx, userID
func (_m *ChatRepository) GetAccountFriends(ctx context.Context, userID int) ([]int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountFriends")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int64); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryMessage provides a mock function with given fields: ctx, accountID, offset, page
func (_m *ChatRepository) GetHistoryMessage(ctx context.Context, accountID int, offset int, page int) ([]*domain.FriendOrChannelMessage, bool, error) {
	ret := _m.Called(ctx, accountID, offset, page)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryMessage")
	}

	var r0 []*domain.FriendOrChannelMessage
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*domain.FriendOrChannelMessage, bool, error)); ok {
		return rf(ctx, accountID, offset, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []*domain.FriendOrChannelMessage); ok {
		r0 = rf(ctx, accountID, offset, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.FriendOrChannelMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) bool); ok {
		r1 = rf(ctx, accountID, offset, page)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, accountID, offset, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHistoryMessageByChannel provides a mock function with given fields: ctx, channelID, offset, page
func (_m *ChatRepository) GetHistoryMessageByChannel(ctx context.Context, channelID int, offset int, page int) ([]*domain.ChannelMessage, bool, error) {
	ret := _m.Called(ctx, channelID, offset, page)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryMessageByChannel")
	}

	var r0 []*domain.ChannelMessage
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*domain.ChannelMessage, bool, error)); ok {
		return rf(ctx, channelID, offset, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []*domain.ChannelMessage); ok {
		r0 = rf(ctx, channelID, offset, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChannelMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) bool); ok {
		r1 = rf(ctx, channelID, offset, page)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, channelID, offset, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHistoryMessageByFriend provides a mock function with given fields: ctx, accountID, friendID, offset, page
func (_m *ChatRepository) GetHistoryMessageByFriend(ctx context.Context, accountID int, friendID int, offset int, page int) ([]*domain.FriendMessage, bool, error) {
	ret := _m.Called(ctx, accountID, friendID, offset, page)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryMessageByFriend")
	}

	var r0 []*domain.FriendMessage
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int) ([]*domain.FriendMessage, bool, error)); ok {
		return rf(ctx, accountID, friendID, offset, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int) []*domain.FriendMessage); ok {
		r0 = rf(ctx, accountID, friendID, offset, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.FriendMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, int) bool); ok {
		r1 = rf(ctx, accountID, friendID, offset, page)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, int) error); ok {
		r2 = rf(ctx, accountID, friendID, offset, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrCreateUserChatInformation provides a mock function with given fields: ctx, userID
func (_m *ChatRepository) GetOrCreateUserChatInformation(ctx context.Context, userID int) (*domain.AccountChatInformation, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateUserChatInformation")
	}

	var r0 *domain.AccountChatInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.AccountChatInformation, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.AccountChatInformation); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccountChatInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertChannelMessage provides a mock function with given fields: ctx, userID, channelID, content
func (_m *ChatRepository) InsertChannelMessage(ctx context.Context, userID int64, channelID int64, content string) (int64, error) {
	ret := _m.Called(ctx, userID, channelID, content)

	if len(ret) == 0 {
		panic("no return value specified for InsertChannelMessage")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) (int64, error)); ok {
		return rf(ctx, userID, channelID, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) int64); ok {
		r0 = rf(ctx, userID, channelID, content)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) error); ok {
		r1 = rf(ctx, userID, channelID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFriendMessage provides a mock function with given fields: ctx, userID, friendID, content
func (_m *ChatRepository) InsertFriendMessage(ctx context.Context, userID int64, friendID int64, content string) (int64, error) {
	ret := _m.Called(ctx, userID, friendID, content)

	if len(ret) == 0 {
		panic("no return value specified for InsertFriendMessage")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) (int64, error)); ok {
		return rf(ctx, userID, friendID, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) int64); ok {
		r0 = rf(ctx, userID, friendID, content)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) error); ok {
		r1 = rf(ctx, userID, friendID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChannelMessage provides a mock function with given fields: ctx, userID, channelID, messageID, content
func (_m *ChatRepository) SendChannelMessage(ctx context.Context, userID int, channelID int, messageID int, content string) error {
	ret := _m.Called(ctx, userID, channelID, messageID, content)

	if len(ret) == 0 {
		panic("no return value specified for SendChannelMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string) error); ok {
		r0 = rf(ctx, userID, channelID, messageID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendFriendMessage provides a mock function with given fields: ctx, userID, friendID, messageID, content
func (_m *ChatRepository) SendFriendMessage(ctx context.Context, userID int, friendID int, messageID int, content string) error {
	ret := _m.Called(ctx, userID, friendID, messageID, content)

	if len(ret) == 0 {
		panic("no return value specified for SendFriendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string) error); ok {
		r0 = rf(ctx, userID, friendID, messageID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendUserStatusMessage provides a mock function with given fields: ctx, userID, onlineStatus
func (_m *ChatRepository) SendUserStatusMessage(ctx context.Context, userID int, onlineStatus domain.StatusType) error {
	ret := _m.Called(ctx, userID, onlineStatus)

	if len(ret) == 0 {
		panic("no return value specified for SendUserStatusMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.StatusType) error); ok {
		r0 = rf(ctx, userID, onlineStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeChannelMessage provides a mock function with given fields: ctx, channelID, notify
func (_m *ChatRepository) SubscribeChannelMessage(ctx context.Context, channelID int, notify func(*domain.ChannelMessage) error) {
	_m.Called(ctx, channelID, notify)
}

// SubscribeFriendMessage provides a mock function with given fields: ctx, userID, friendID, notify
func (_m *ChatRepository) SubscribeFriendMessage(ctx context.Context, userID int, friendID int, notify func(*domain.FriendMessage) error) {
	_m.Called(ctx, userID, friendID, notify)
}

// SubscribeFriendOnlineStatus provides a mock function with given fields: ctx, friend, notify
func (_m *ChatRepository) SubscribeFriendOnlineStatus(ctx context.Context, friend int, notify func(*domain.StatusMessage) error) {
	_m.Called(ctx, friend, notify)
}

// SubscribeUserStatus provides a mock function with given fields: ctx, userID, notify
func (_m *ChatRepository) SubscribeUserStatus(ctx context.Context, userID int, notify func(*domain.StatusMessage) error) {
	_m.Called(ctx, userID, notify)
}

// UnSubscribeAll provides a mock function with given fields: ctx
func (_m *ChatRepository) UnSubscribeAll(ctx context.Context) {
	_m.Called(ctx)
}

// UnSubscribeChannelMessage provides a mock function with given fields: ctx, channelID
func (_m *ChatRepository) UnSubscribeChannelMessage(ctx context.Context, channelID int) {
	_m.Called(ctx, channelID)
}

// UnSubscribeFriendMessage provides a mock function with given fields: ctx, friendID
func (_m *ChatRepository) UnSubscribeFriendMessage(ctx context.Context, friendID int) {
	_m.Called(ctx, friendID)
}

// UnSubscribeFriendOnlineStatus provides a mock function with given fields: ctx, friendID
func (_m *ChatRepository) UnSubscribeFriendOnlineStatus(ctx context.Context, friendID int) {
	_m.Called(ctx, friendID)
}

// UpdateOnlineStatus provides a mock function with given fields: ctx, userID, onlineStatus
func (_m *ChatRepository) UpdateOnlineStatus(ctx context.Context, userID int, onlineStatus domain.OnlineStatusEnum) error {
	ret := _m.Called(ctx, userID, onlineStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOnlineStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.OnlineStatusEnum) error); ok {
		r0 = rf(ctx, userID, onlineStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
