// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// KafkaReader is an autogenerated mock type for the KafkaReader type
type KafkaReader struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *KafkaReader) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitMessages provides a mock function with given fields: ctx, msgs
func (_m *KafkaReader) CommitMessages(ctx context.Context, msgs ...kafka.Message) error {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommitMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...kafka.Message) error); ok {
		r0 = rf(ctx, msgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *KafkaReader) Config() kafka.ReaderConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 kafka.ReaderConfig
	if rf, ok := ret.Get(0).(func() kafka.ReaderConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kafka.ReaderConfig)
	}

	return r0
}

// FetchMessage provides a mock function with given fields: ctx
func (_m *KafkaReader) FetchMessage(ctx context.Context) (kafka.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchMessage")
	}

	var r0 kafka.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (kafka.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) kafka.Message); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(kafka.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lag provides a mock function with given fields:
func (_m *KafkaReader) Lag() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lag")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Offset provides a mock function with given fields:
func (_m *KafkaReader) Offset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Offset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ReadLag provides a mock function with given fields: ctx
func (_m *KafkaReader) ReadLag(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadLag")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessage provides a mock function with given fields: ctx
func (_m *KafkaReader) ReadMessage(ctx context.Context) (kafka.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessage")
	}

	var r0 kafka.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (kafka.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) kafka.Message); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(kafka.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOffset provides a mock function with given fields: offset
func (_m *KafkaReader) SetOffset(offset int64) error {
	ret := _m.Called(offset)

	if len(ret) == 0 {
		panic("no return value specified for SetOffset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOffsetAt provides a mock function with given fields: ctx, t
func (_m *KafkaReader) SetOffsetAt(ctx context.Context, t time.Time) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for SetOffsetAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields:
func (_m *KafkaReader) Stats() kafka.ReaderStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 kafka.ReaderStats
	if rf, ok := ret.Get(0).(func() kafka.ReaderStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kafka.ReaderStats)
	}

	return r0
}

// NewKafkaReader creates a new instance of KafkaReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaReader {
	mock := &KafkaReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
