// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/segmentio/kafka-go"
	compress "github.com/segmentio/kafka-go/compress"

	mock "github.com/stretchr/testify/mock"

	net "net"

	time "time"
)

// KafkaConn is an autogenerated mock type for the KafkaConn type
type KafkaConn struct {
	mock.Mock
}

// ApiVersions provides a mock function with given fields:
func (_m *KafkaConn) ApiVersions() ([]kafka.ApiVersion, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ApiVersions")
	}

	var r0 []kafka.ApiVersion
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]kafka.ApiVersion, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []kafka.ApiVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.ApiVersion)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Broker provides a mock function with given fields:
func (_m *KafkaConn) Broker() kafka.Broker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Broker")
	}

	var r0 kafka.Broker
	if rf, ok := ret.Get(0).(func() kafka.Broker); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kafka.Broker)
	}

	return r0
}

// Brokers provides a mock function with given fields:
func (_m *KafkaConn) Brokers() ([]kafka.Broker, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Brokers")
	}

	var r0 []kafka.Broker
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]kafka.Broker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []kafka.Broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.Broker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *KafkaConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Controller provides a mock function with given fields:
func (_m *KafkaConn) Controller() (kafka.Broker, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Controller")
	}

	var r0 kafka.Broker
	var r1 error
	if rf, ok := ret.Get(0).(func() (kafka.Broker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() kafka.Broker); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kafka.Broker)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopics provides a mock function with given fields: topics
func (_m *KafkaConn) DeleteTopics(topics ...string) error {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(topics...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LocalAddr provides a mock function with given fields:
func (_m *KafkaConn) LocalAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// Offset provides a mock function with given fields:
func (_m *KafkaConn) Offset() (int64, int) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Offset")
	}

	var r0 int64
	var r1 int
	if rf, ok := ret.Get(0).(func() (int64, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// Read provides a mock function with given fields: b
func (_m *KafkaConn) Read(b []byte) (int, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadBatch provides a mock function with given fields: minBytes, maxBytes
func (_m *KafkaConn) ReadBatch(minBytes int, maxBytes int) *kafka.Batch {
	ret := _m.Called(minBytes, maxBytes)

	if len(ret) == 0 {
		panic("no return value specified for ReadBatch")
	}

	var r0 *kafka.Batch
	if rf, ok := ret.Get(0).(func(int, int) *kafka.Batch); ok {
		r0 = rf(minBytes, maxBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Batch)
		}
	}

	return r0
}

// ReadBatchWith provides a mock function with given fields: cfg
func (_m *KafkaConn) ReadBatchWith(cfg kafka.ReadBatchConfig) *kafka.Batch {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for ReadBatchWith")
	}

	var r0 *kafka.Batch
	if rf, ok := ret.Get(0).(func(kafka.ReadBatchConfig) *kafka.Batch); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Batch)
		}
	}

	return r0
}

// ReadFirstOffset provides a mock function with given fields:
func (_m *KafkaConn) ReadFirstOffset() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadFirstOffset")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadLastOffset provides a mock function with given fields:
func (_m *KafkaConn) ReadLastOffset() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadLastOffset")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessage provides a mock function with given fields: maxBytes
func (_m *KafkaConn) ReadMessage(maxBytes int) (kafka.Message, error) {
	ret := _m.Called(maxBytes)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessage")
	}

	var r0 kafka.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (kafka.Message, error)); ok {
		return rf(maxBytes)
	}
	if rf, ok := ret.Get(0).(func(int) kafka.Message); ok {
		r0 = rf(maxBytes)
	} else {
		r0 = ret.Get(0).(kafka.Message)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(maxBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOffset provides a mock function with given fields: t
func (_m *KafkaConn) ReadOffset(t time.Time) (int64, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for ReadOffset")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (int64, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(time.Time) int64); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOffsets provides a mock function with given fields:
func (_m *KafkaConn) ReadOffsets() (int64, int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadOffsets")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() (int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadPartitions provides a mock function with given fields: topics
func (_m *KafkaConn) ReadPartitions(topics ...string) ([]kafka.Partition, error) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReadPartitions")
	}

	var r0 []kafka.Partition
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]kafka.Partition, error)); ok {
		return rf(topics...)
	}
	if rf, ok := ret.Get(0).(func(...string) []kafka.Partition); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.Partition)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(topics...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteAddr provides a mock function with given fields:
func (_m *KafkaConn) RemoteAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// Seek provides a mock function with given fields: offset, whence
func (_m *KafkaConn) Seek(offset int64, whence int) (int64, error) {
	ret := _m.Called(offset, whence)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return rf(offset, whence)
	}
	if rf, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = rf(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(offset, whence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDeadline provides a mock function with given fields: t
func (_m *KafkaConn) SetDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReadDeadline provides a mock function with given fields: t
func (_m *KafkaConn) SetReadDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRequiredAcks provides a mock function with given fields: n
func (_m *KafkaConn) SetRequiredAcks(n int) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for SetRequiredAcks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWriteDeadline provides a mock function with given fields: t
func (_m *KafkaConn) SetWriteDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: b
func (_m *KafkaConn) Write(b []byte) (int, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteCompressedMessages provides a mock function with given fields: codec, msgs
func (_m *KafkaConn) WriteCompressedMessages(codec compress.Codec, msgs ...kafka.Message) (int, error) {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, codec)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteCompressedMessages")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(compress.Codec, ...kafka.Message) (int, error)); ok {
		return rf(codec, msgs...)
	}
	if rf, ok := ret.Get(0).(func(compress.Codec, ...kafka.Message) int); ok {
		r0 = rf(codec, msgs...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(compress.Codec, ...kafka.Message) error); ok {
		r1 = rf(codec, msgs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteCompressedMessagesAt provides a mock function with given fields: codec, msgs
func (_m *KafkaConn) WriteCompressedMessagesAt(codec compress.Codec, msgs ...kafka.Message) (int, int32, int64, time.Time, error) {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, codec)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteCompressedMessagesAt")
	}

	var r0 int
	var r1 int32
	var r2 int64
	var r3 time.Time
	var r4 error
	if rf, ok := ret.Get(0).(func(compress.Codec, ...kafka.Message) (int, int32, int64, time.Time, error)); ok {
		return rf(codec, msgs...)
	}
	if rf, ok := ret.Get(0).(func(compress.Codec, ...kafka.Message) int); ok {
		r0 = rf(codec, msgs...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(compress.Codec, ...kafka.Message) int32); ok {
		r1 = rf(codec, msgs...)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(compress.Codec, ...kafka.Message) int64); ok {
		r2 = rf(codec, msgs...)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(compress.Codec, ...kafka.Message) time.Time); ok {
		r3 = rf(codec, msgs...)
	} else {
		r3 = ret.Get(3).(time.Time)
	}

	if rf, ok := ret.Get(4).(func(compress.Codec, ...kafka.Message) error); ok {
		r4 = rf(codec, msgs...)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// WriteMessages provides a mock function with given fields: msgs
func (_m *KafkaConn) WriteMessages(msgs ...kafka.Message) (int, error) {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteMessages")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(...kafka.Message) (int, error)); ok {
		return rf(msgs...)
	}
	if rf, ok := ret.Get(0).(func(...kafka.Message) int); ok {
		r0 = rf(msgs...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(...kafka.Message) error); ok {
		r1 = rf(msgs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKafkaConn creates a new instance of KafkaConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaConn {
	mock := &KafkaConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
